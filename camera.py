import cv2
import numpy as np

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –æ–∫–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
show_image = input("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ? (1 - –¥–∞, 0 - –Ω–µ—Ç): ").strip()
show_image = show_image == "1"

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HSV –¥–ª—è –∑–µ–ª—ë–Ω–æ–≥–æ
lower_hsv = np.array([35, 40, 40])
upper_hsv = np.array([85, 255, 255])

# –ö–∞–º–µ—Ä–∞
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("–ö–∞–º–µ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    exit()

print("–ù–∞–∂–º–∏—Ç–µ 'q' –≤ –æ–∫–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
print("–í–≤–µ–¥–∏—Ç–µ 3 –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–∞–¥—Ä–∞.")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞")
            break

        # –¶–µ–Ω—Ç—Ä –∫–∞–¥—Ä–∞
        h, w, _ = frame.shape
        cx, cy = w // 2, h // 2

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HSV
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # –ú–∞—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º HSV
        mask = cv2.inRange(hsv, lower_hsv, upper_hsv)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        found = False
        for contour in contours:
            x, y, rw, rh = cv2.boundingRect(contour)
            if rw >= 10 and rh >= 100:
                print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–ª–∞—Å—Ç–∏: x={x}, y={y}, w={rw}, h={rh}")
                found = True
                if show_image:
                    cv2.rectangle(frame, (x, y), (x + rw, y + rh), (0, 255, 0), 2)
                break

        if not found:
            print("0")

        # –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω—É—é —Ç–æ—á–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ
        if show_image:
            cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)
            cv2.imshow("Frame", frame)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        import sys, select
        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            cmd = input().strip()
            if cmd == "3":
                # –°—á–∏—Ç—ã–≤–∞–µ–º HSV —Ü–≤–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
                center_hsv = hsv[cy, cx]
                h_val, s_val, v_val = int(center_hsv[0]), int(center_hsv[1]), int(center_hsv[2])
                print(f"üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç—É HSV: {center_hsv}")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å –¥–æ–ø—É—Å–∫–æ–º
                delta_h, delta_s, delta_v = 10, 60, 60
                lower_hsv = np.array([
                    max(0, h_val - delta_h),
                    max(0, s_val - delta_s),
                    max(0, v_val - delta_v)
                ])
                upper_hsv = np.array([
                    min(179, h_val + delta_h),
                    min(255, s_val + delta_s),
                    min(255, v_val + delta_v)
                ])

                print(f"üéØ –ù–æ–≤—ã–π HSV –¥–∏–∞–ø–∞–∑–æ–Ω:")
                print(f"   –ù–∏–∂–Ω–∏–π: {lower_hsv}")
                print(f"   –í–µ—Ä—Ö–Ω–∏–π: {upper_hsv}")

except KeyboardInterrupt:
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")

cap.release()
if show_image:
    cv2.destroyAllWindows()
