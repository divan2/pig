import cv2
import numpy as np
from smbus2 import SMBus
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
show_image = input("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ? (1 - –¥–∞, 0 - –Ω–µ—Ç): ").strip()
show_image = show_image == "1"

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è HSV –¥–ª—è –∑–µ–ª—ë–Ω–æ–≥–æ
lower_hsv = np.array([35, 40, 40])
upper_hsv = np.array([85, 255, 255])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ I2C
WRITE_DAC = 0x40
ADDR_A1 = 0x60  # –ü—Ä–∞–≤—ã–π –≥–∞–∑
ADDR_A2 = 0x61  # –õ–µ–≤—ã–π –≥–∞–∑
ADDR_B1 = 0x60  # –ü—Ä–∞–≤—ã–π —Ç–æ—Ä–º–æ–∑ (—à–∏–Ω–∞ 2)
ADDR_B2 = 0x61  # –õ–µ–≤—ã–π —Ç–æ—Ä–º–æ–∑ (—à–∏–Ω–∞ 2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
DEADZONE = 0.1
SMOOTHING_FACTOR = 0.2  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2C
bus1 = SMBus(1)  # GPIO2/3 (—à–∏–Ω–∞ 1)
bus2 = SMBus(14)  # GPIO23/24 (—à–∏–Ω–∞ 2)

# –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
current_values = {
    'right_gas': 0,
    'left_gas': 0,
    'right_brake': 0,
    'left_brake': 0
}


def set_dac(bus, addr, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (0..4095) –Ω–∞ MCP4725"""
    value = max(0, min(4095, int(value * 40.95)))  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è % –≤ 12-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    high = (value >> 4) & 0xFF
    low = (value << 4) & 0xFF
    bus.write_i2c_block_data(addr, WRITE_DAC, [high, low])


def apply_smoothing(new_values):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    for key in current_values:
        current_values[key] = (SMOOTHING_FACTOR * new_values[key] +
                               (1 - SMOOTHING_FACTOR) * current_values[key])
    return current_values


def normalize_coordinates(x, y, width, height):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]"""
    nx = 2 * (x / width) - 1
    ny = 1 - 2 * (y / height)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—å Y
    return nx, ny


def calculate_controls(nx, ny):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    controls = {
        'right_gas': 0,
        'left_gas': 0,
        'right_brake': 0,
        'left_brake': 0
    }

    # –ü—Ä–∏–º–µ–Ω—è–µ–º deadzone
    if abs(nx) < DEADZONE:
        nx = 0
    if abs(ny) < DEADZONE:
        ny = 0

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞
    if nx > 0.5:  # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
        controls['left_gas'] = 100
        controls['right_brake'] = 100
    elif nx < -0.5:  # –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ
        controls['right_gas'] = 100
        controls['left_brake'] = 100
    else:
        # –õ–∏–Ω–µ–π–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏–µ–º
        if ny < -0.2:  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
            gas = min(100, 100 * (-ny))
            controls['right_gas'] = gas
            controls['left_gas'] = gas
        elif ny > 0.2:  # –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ
            brake = min(100, 100 * ny)
            controls['right_brake'] = brake
            controls['left_brake'] = brake

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤–æ—Ä–æ—Ç –µ—Å–ª–∏ –Ω–µ –≤ deadzone
        if nx != 0:
            turn_factor = abs(nx) * 100
            if nx > 0:  # –ü–æ–≤–æ—Ä–æ—Ç –≤–ø—Ä–∞–≤–æ
                controls['left_gas'] = min(100, controls['left_gas'] + turn_factor)
                controls['right_gas'] = max(0, controls['right_gas'] - turn_factor)
            else:  # –ü–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ
                controls['right_gas'] = min(100, controls['right_gas'] + turn_factor)
                controls['left_gas'] = max(0, controls['left_gas'] - turn_factor)

    return controls


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("–ö–∞–º–µ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    exit()

print("–ù–∞–∂–º–∏—Ç–µ 'q' –≤ –æ–∫–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
print("–í–≤–µ–¥–∏—Ç–µ 3 –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–∞–¥—Ä–∞.")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞")
            break

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
        h, w, _ = frame.shape
        cx, cy = w // 2, h // 2

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HSV
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # –ú–∞—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º HSV
        mask = cv2.inRange(hsv, lower_hsv, upper_hsv)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        found = False
        for contour in contours:
            x, y, rw, rh = cv2.boundingRect(contour)
            if rw >= 10 and rh >= 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                nx, ny = normalize_coordinates(x + rw / 2, y + rh / 2, w, h)

                # –í—ã—á–∏—Å–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                controls = calculate_controls(nx, ny)
                smoothed = apply_smoothing(controls)

                # –£–ø—Ä–∞–≤–ª—è–µ–º –¶–ê–ü
                set_dac(bus1, ADDR_A1, smoothed['right_gas'])  # –ü—Ä–∞–≤—ã–π –≥–∞–∑
                set_dac(bus1, ADDR_A2, smoothed['left_gas'])  # –õ–µ–≤—ã–π –≥–∞–∑
                set_dac(bus2, ADDR_B1, smoothed['right_brake'])  # –ü—Ä–∞–≤—ã–π —Ç–æ—Ä–º–æ–∑
                set_dac(bus2, ADDR_B2, smoothed['left_brake'])  # –õ–µ–≤—ã–π —Ç–æ—Ä–º–æ–∑

                print(
                    f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({nx:.2f}, {ny:.2f}) | –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ì–∞–∑ R/L: {smoothed['right_gas']:.0f}/{smoothed['left_gas']:.0f}% | –¢–æ—Ä–º–æ–∑ R/L: {smoothed['right_brake']:.0f}/{smoothed['left_brake']:.0f}%")
                found = True

                if show_image:
                    cv2.rectangle(frame, (x, y), (x + rw, y + rh), (0, 255, 0), 2)
                    cv2.putText(frame, f"X: {nx:.2f}, Y: {ny:.2f}", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                break

        if not found:
            # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
            controls = {'right_gas': 0, 'left_gas': 0, 'right_brake': 0, 'left_brake': 0}
            smoothed = apply_smoothing(controls)
            set_dac(bus1, ADDR_A1, 0)
            set_dac(bus1, ADDR_A2, 0)
            set_dac(bus2, ADDR_B1, 0)
            set_dac(bus2, ADDR_B2, 0)
            print("0")

        # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if show_image:
            cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)
            cv2.imshow("Frame", frame)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break

        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞
        import sys, select

        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            cmd = input().strip()
            if cmd == "3":
                center_hsv = hsv[cy, cx]
                h_val, s_val, v_val = int(center_hsv[0]), int(center_hsv[1]), int(center_hsv[2])
                print(f"üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç—É HSV: {center_hsv}")

                delta_h, delta_s, delta_v = 10, 60, 60
                lower_hsv = np.array([
                    max(0, h_val - delta_h),
                    max(0, s_val - delta_s),
                    max(0, v_val - delta_v)
                ])
                upper_hsv = np.array([
                    min(179, h_val + delta_h),
                    min(255, s_val + delta_s),
                    min(255, v_val + delta_v)
                ])
                print(f"üéØ –ù–æ–≤—ã–π HSV –¥–∏–∞–ø–∞–∑–æ–Ω:")
                print(f"   –ù–∏–∂–Ω–∏–π: {lower_hsv}")
                print(f"   –í–µ—Ä—Ö–Ω–∏–π: {upper_hsv}")

except KeyboardInterrupt:
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–æ–≤
set_dac(bus1, ADDR_A1, 0)
set_dac(bus1, ADDR_A2, 0)
set_dac(bus2, ADDR_B1, 0)
set_dac(bus2, ADDR_B2, 0)
bus1.close()
bus2.close()
cap.release()
if show_image:
    cv2.destroyAllWindows()