import cv2
import numpy as np
from smbus2 import SMBus
import time
import sys
import select

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–º–µ—Ä—ã
show_image = True  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è HSV (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ)
lower_hsv = np.array([35, 40, 40])
upper_hsv = np.array([85, 255, 255])
calibrated = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ I2C
WRITE_DAC = 0x40
ADDR_A1 = 0x60  # –ü—Ä–∞–≤—ã–π –≥–∞–∑
ADDR_A2 = 0x61  # –õ–µ–≤—ã–π –≥–∞–∑
ADDR_B1 = 0x60  # –ü—Ä–∞–≤—ã–π —Ç–æ—Ä–º–æ–∑ (—à–∏–Ω–∞ 2)
ADDR_B2 = 0x61  # –õ–µ–≤—ã–π —Ç–æ—Ä–º–æ–∑ (—à–∏–Ω–∞ 2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
DEADZONE = 0.1
SMOOTHING_FACTOR = 0.2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2C
bus1 = SMBus(1)  # GPIO2/3 (—à–∏–Ω–∞ 1)
bus2 = SMBus(14)  # GPIO23/24 (—à–∏–Ω–∞ 2)

# –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
current_values = {
    'right_gas': 0,
    'left_gas': 0,
    'right_brake': 0,
    'left_brake': 0
}


def set_dac(bus, addr, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (0..4095) –Ω–∞ MCP4725"""
    value = max(0, min(4095, int(value * 40.95)))  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è % –≤ 12-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    high = (value >> 4) & 0xFF
    low = (value << 4) & 0xFF
    bus.write_i2c_block_data(addr, WRITE_DAC, [high, low])


def apply_smoothing(new_values):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    for key in current_values:
        current_values[key] = (SMOOTHING_FACTOR * new_values[key] +
                               (1 - SMOOTHING_FACTOR) * current_values[key])
    return current_values


def normalize_coordinates(x, y, width, height):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]"""
    nx = 2 * (x / width) - 1
    ny = 1 - 2 * (y / height)  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—å Y
    return nx, ny


def calculate_controls(nx, ny):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≥–∞–∑–∞ –∏ —Ç–æ—Ä–º–æ–∑–∞ –¥–ª—è —Ç–∞–Ω–∫–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    controls = {
        'right_gas': 0,
        'left_gas': 0,
        'right_brake': 0,
        'left_brake': 0
    }

    # –ì—Ä–∞–Ω–∏—Ü—ã
    ACC_Y_THRESHOLD = -0.3
    BRAKE_Y_THRESHOLD = -0.3
    TURN_X_BORDER = 0.7
    MAX_BRAKE_TURN = 25  # –º–∞–∫—Å. —Ç–æ—Ä–º–æ–∑ –ø—Ä–∏ —Ä–µ–∑–∫–æ–º –ø–æ–≤–æ—Ä–æ—Ç–µ

    # –£—Å–∫–æ—Ä–µ–Ω–∏–µ
    if ny >= ACC_Y_THRESHOLD:
        # –°–∏–ª–∞ –≥–∞–∑–∞ –ø–æ –ø—Ä—è–º–æ–π
        base_gas = (ny - ACC_Y_THRESHOLD) / (1 - ACC_Y_THRESHOLD) * 100

        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–≤–æ—Ä–æ—Ç–∞
        if -TURN_X_BORDER < nx < TURN_X_BORDER:
            # –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç ‚Äî —É–º–µ–Ω—å—à–∞–µ–º –≥–∞–∑ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –∫–æ–ª–µ—Å–µ
            correction = abs(nx) / TURN_X_BORDER  # [0, 1]
            if nx < 0:
                controls['left_gas'] = base_gas * (1 - correction)
                controls['right_gas'] = base_gas
            else:
                controls['right_gas'] = base_gas * (1 - correction)
                controls['left_gas'] = base_gas
        else:
            # –†–µ–∑–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç ‚Äî —Ç–æ—Ä–º–æ–∑–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª–µ—Å–æ
            if nx < 0:
                controls['right_gas'] = base_gas
                controls['left_brake'] = (abs(nx) - TURN_X_BORDER) / (1 - TURN_X_BORDER) * MAX_BRAKE_TURN
            else:
                controls['left_gas'] = base_gas
                controls['right_brake'] = (abs(nx) - TURN_X_BORDER) / (1 - TURN_X_BORDER) * MAX_BRAKE_TURN

    # –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ
    elif ny < BRAKE_Y_THRESHOLD:
        base_brake = (abs(ny) - abs(BRAKE_Y_THRESHOLD)) / (1 - abs(BRAKE_Y_THRESHOLD)) * 100

        controls['left_brake'] = base_brake
        controls['right_brake'] = base_brake

        if abs(nx) > DEADZONE:
            # –£—Å–∏–ª–∏–≤–∞–µ–º —Ç–æ—Ä–º–æ–∑ —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
            extra = abs(nx) * 25
            if nx > 0:
                controls['left_brake'] = min(100, controls['left_brake'] + extra)
            else:
                controls['right_brake'] = min(100, controls['right_brake'] + extra)

    return controls


# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("–ö–∞–º–µ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
    exit()

print("=== –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ===")
print("1. –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –æ–±—ä–µ–∫—Ç –∏ –≤–≤–µ–¥–∏—Ç–µ '3' –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞")
print("2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
print("3. –ù–∞–∂–º–∏—Ç–µ 'q' –≤ –æ–∫–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞")

try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–∞")
            break

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
        h, w, _ = frame.shape
        cx, cy = w // 2, h // 2

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HSV
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        status_text = "gotov k kalibrovke" if not calibrated else "kalibrovka done"
        cv2.putText(frame, status_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        if calibrated:
            # –ú–∞—Å–∫–∞ –ø–æ —Ç–µ–∫—É—â–∏–º –≥—Ä–∞–Ω–∏—Ü–∞–º HSV
            mask = cv2.inRange(hsv, lower_hsv, upper_hsv)

            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            found = False
            for contour in contours:
                x, y, rw, rh = cv2.boundingRect(contour)
                if rw >= 10 and rh >= 10:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    nx, ny = normalize_coordinates(x + rw / 2, y + rh / 2, w, h)

                    # –í—ã—á–∏—Å–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
                    controls = calculate_controls(nx, ny)
                    smoothed = apply_smoothing(controls)

                    # –£–ø—Ä–∞–≤–ª—è–µ–º –¶–ê–ü
                    set_dac(bus1, ADDR_A1, smoothed['right_gas'])
                    set_dac(bus1, ADDR_A2, smoothed['left_gas'])
                    set_dac(bus2, ADDR_B1, smoothed['right_brake'])
                    set_dac(bus2, ADDR_B2, smoothed['left_brake'])

                    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    control_text = (
                        f"R: gaz {smoothed['right_gas']:.0f}%, beak {smoothed['right_brake']:.0f}% | "
                        f"L: gaz {smoothed['left_gas']:.0f}%, break {smoothed['left_brake']:.0f}%")
                    print(control_text)

                    cv2.putText(frame, control_text, (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
                    found = True

                    cv2.rectangle(frame, (x, y), (x + rw, y + rh), (0, 255, 0), 2)
                    cv2.putText(frame, f"X: {nx:.2f}, Y: {ny:.2f}", (10, 90),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                    break

            if not found:
                # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
                controls = {'right_gas': 0, 'left_gas': 0, 'right_brake': 0, 'left_brake': 0}
                smoothed = apply_smoothing(controls)
                set_dac(bus1, ADDR_A1, 0)
                set_dac(bus1, ADDR_A2, 0)
                set_dac(bus2, ADDR_B1, 0)
                set_dac(bus2, ADDR_B2, 0)
                print("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤—Å–µ –≤—ã—Ö–æ–¥—ã 0%")

        # –†–∏—Å—É–µ–º —Ü–µ–Ω—Ç—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)
        cv2.imshow("Camera Tracking", frame)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ (–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞)
        if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
            cmd = input().strip()
            if cmd == "3":
                # –°—á–∏—Ç—ã–≤–∞–µ–º HSV —Ü–≤–µ—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
                center_hsv = hsv[cy, cx]
                h_val, s_val, v_val = int(center_hsv[0]), int(center_hsv[1]), int(center_hsv[2])
                print(f"üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ —Ü–≤–µ—Ç—É HSV: {center_hsv}")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å –¥–æ–ø—É—Å–∫–æ–º (–∫–∞–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ)
                delta_h, delta_s, delta_v = 10, 60, 60
                lower_hsv = np.array([
                    max(0, h_val - delta_h),
                    max(0, s_val - delta_s),
                    max(0, v_val - delta_v)
                ])
                upper_hsv = np.array([
                    min(179, h_val + delta_h),
                    min(255, s_val + delta_s),
                    min(255, v_val + delta_v)
                ])

                print(f"üéØ –ù–æ–≤—ã–π HSV –¥–∏–∞–ø–∞–∑–æ–Ω:")
                print(f"   –ù–∏–∂–Ω–∏–π: {lower_hsv}")
                print(f"   –í–µ—Ä—Ö–Ω–∏–π: {upper_hsv}")
                calibrated = True

except KeyboardInterrupt:
    print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–æ–≤
set_dac(bus1, ADDR_A1, 0)
set_dac(bus1, ADDR_A2, 0)
set_dac(bus2, ADDR_B1, 0)
set_dac(bus2, ADDR_B2, 0)
bus1.close()
bus2.close()
cap.release()
cv2.destroyAllWindows()